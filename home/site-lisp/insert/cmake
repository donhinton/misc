# -*- cmake -*-

################################################################################
# Top level Start
cmake_minimum_required(VERSION 3.5)

#project(
#  <PROJECT-NAME>
#	[VERSION <major>[.<minor>[.<patch>[.<tweak>]]]]
#	[LANGUAGES <language-name>...])

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# We need C++ 11
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Make Debug the default, pass -DCMAKE_BUILD_TYPE=Release to change this.
if (NOT CMAKE_BUILD_TYPE)
	message ("Setting CMAKE_BUILD_TYPE = Debug")
	set(CMAKE_BUILD_TYPE Debug)
endif()

# enable CTest
#enable_testing()

#include(cmakefile)


# LLVM specific (assuming clang/llvm installed under ~/usr)
# out of source builds
#set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "$ENV{LLVM_DIR}")
#find_package(LLVM REQUIRED CONFIG)
#include(AddLLVM)
#add_definitions(${LLVM_DEFINITIONS})
#include_directories(${LLVM_INCLUDE_DIRS})
#link_directories(${LLVM_LIBRARY_DIRS})
#add_definitions(-fno-rtti)
# invoke like this:
# CC=~/usr/bin/clang CXX=~/usr/bin/clang++ LLVM_DIR=~/usr/lib/cmake/llvm/ cmake ../ -GNinja
# LLVM specific End

#add_subdirectory(somedir)

# Top Level End
################################################################################

#add_subdirectory(somedir)

#find_package(
# <package> [version] [EXACT] [QUIET] [MODULE]
# [REQUIRED] [[COMPONENTS] [components...]]
# [OPTIONAL_COMPONENTS components...]
# [NO_POLICY_SCOPE])

#include_directories(somedir)
#add_executable(exe file.cpp)
#target_link_libraries(exe|lib target|var|etc)

#add_library(name [SHARED] file.cpp)

# simple form needs absolute path
#add_test(Name ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/executable [arg1 [arg2 ...]])

# more complex, but no need for absolute path
#add_test(
# NAME <name> [CONFIGURATIONS [Debug|Release|...]]
# [WORKING_DIRECTORY dir]
# COMMAND <command> [arg1 [arg2 ...]])
